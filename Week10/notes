## Week 10
-- Week 10.1
## Types of Databases
1. NOSQL Databases
a. store data in a schema-less fasion. Extremely lean and fast way to store data.
example: MongoDB.

2. Graph Databases
a. Data is stored in the fomr of a graph. Specially useful in cases where relationships need to be stored (social networks) Example: Neo4j

3. Vector Databases
Stores data in the form of vectors. useful in ML, examples: Pinecone

4. SQL Databases
Stores data in form on rows, most full stack applications will use this, Examples: MySQL, Postgres.

## Why SQL?
SQL databases have a strict schema. They require you to :-
1. Define your schema.
2. Put in data that follows that schema
3. Update the schema as your app changes and perform migrations.

So there are 4 parts when using an SQL database(not connecting it to Node.js, just running it and putting data in it)
1. Running the database.
2. Using library that let's you connect and put data in it.
3. Creating a table and defining it's schema.
4. Run queries on the database to interact with the data(insert/udate/delete).

## using a library that let's you connect and put data in it.
1. psql: it is terminal-based frontend to PostgreSQL. it provides an interactive command-line interface to the PostgreSQL (or TimescaleDB) databases. with psql, you can type in queries interactively, issue them to PostgreSQL, and see the query results.

2. pg: it is a Node.js library that you can use in your backend app to store data in the Postgres DB (similar to Monogoose). we will be installing this eventually in our app.

-- SQL (Structure query language). it is a language in which you can describe what/how you want to pull data in the databases.

- to create a table, the command to run is --
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(50) UNIQUE NOT NULL,
  email VARCHAR(255) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

- SERIAL PRIMARY KEY:
A postgreSQL-specific data type for creating an auto-incrementing integer. Every time a new row is inserted, this value automatically increments, ensuring each user has a unique id.

- created_at: the name of the fifth column, intended tot store the timestamp when the user was created.
- TIMESTAMP WITH TIME ZONE: this data type stores both a timestamp and a time zone, allowing for the precise tracking of when an event occured, regardless of the user's or server's time zone.
- DEFAULT CURRENT_TIMESTAMP: this default value automatically sets the created_at column to the date and time at which the row is inserted into he table, using the current timestamp of the database server.

## Interacting with the database
1. Insert
INSERT INTO users(username, password, email) VALUE ('username', 'user_paswword', 'username_email');

2. UPDATE
UPDATE users SET password = "new_password" WHERE email = "user@email.com"

3. DELETE
DELETE users WHERE id = 1;

4.SELECT
SELECT * FROM users WHERE id = 1;

-- There is 3 file index.ts, insertData.ts and getUser.ts for basic example of how to connet postgres DB with nodejs env using pg lib, and how to create, insert and get users from DB

## Relationships and Transactions
Realtions let you store data in different tables and relate it with each other.

-- Relationship in MongoDB
Since mongoDB us a NOSQL database, you can store any shape f data in it. You can store a users details along with thier address, you can store it in an object that has the address details.

-- Relationship in SQL
since sql can not store objects as such, we meed to defined two different tables to store this data in. This is called "relationship" which means that the "Address" table is related to the user table.

-----
CREATE TABLE addresses (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL,
  city VARCHAR(100) NOT NULL,
  country VARCHAR(100) NOT NULL,
  street VARCHAT(255) NOT NULL,
  pincode VARCHAR(100),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCE users(id) ON DELETE CASCADE
);

## SQL query
INSER INTO addresses (user_id, city, country, street, pincode) VALUES (1, "New York", "USA", "123 Broadway St", "10001");

## Node js code
code in insertUserAndAddress.ts

## JOINS
Defining relationship is easy
What's hard is joining data from two or more tables together.
For example, fetch user details and their address.
- run two sql command

-- BAD
SELECT id, username, email FROM users WHERE id = 1;
SELECT city, country, street, pincode FROM addresses WHERE user_id = 1;

-- GOOD Approach using JOINS
SELECT u.id, u.username, u.email, a.city, a.country, a.street, a.pincode FROM users u JOIN addresses a ON u.id = a.user_id WHERE u.id = 1;

## node js for good approach in getUserDetailsWithAddress.ts

-- Benefits of using a join
1. reduced a latency
2. simplified application logic
3. transactional integrity

## Types of JOINS
1. INNER JOIN
return rows when there is at least one match in both tables. If there is no match, the rows are not returned, it is the most common types in JOIN.
USE-CASE : find all users with their addresses. if a user hasn't filled thier address, that user shouldn't be retured.
SELECT users.username, addresses.city, addresses.country, addresses.street, addresses.pincode FROM users INNER JOIN addresses ON users.id = addresses.user_id;

2. LEFT JOIN
returns all rows from the left table, and the matched rows from the right table.
USE-CASE: to list all users from your database along with thier address information (if they are provided it), you'd use a LEFT JOIN. users without an address will still appear in your qury result, but the address filed will be NULL for them.

SELECT users.username, addresses.city, addresses.country, addresses.street, addresses.pincode FROM users LEFT JOIN addresses ON users.id = addresses.user_id;

3. RIGHT JOIN
return all rows from the right table, and the matched rows from the left tables.
USE-CASE: given the structure of the datavase, A RIGHT JOIN would be less common since the "addresses" table is unlikely to have entries not linked to a user due to the foreign key contraint. However, if you had a situation where you start with the "addressess" table and optionally include user information, this would be the use case.

SELECT users.username, addresses.city, addresses.country, addresses.street, addresses.pincode FROM users RIGHT JOIN addresses ON users.id = addresses.user_id;

4. FULL JOIN
Return rows when there is a match in one of the tavles. if effectively combines the results of both LEFT JOIN and RIGHT JOIN.
