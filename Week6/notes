## React Returns
In react, component can only return a signle root element, commonly wrapped in a parent container (like a div). This rule exists because React needs a single entry points to render and manage the component's output.

-- One of the most prominent reasons for its is "Reconciliation". The single-root element rule in react facilitates the "reconciliation" process. where React efficiently updates the real DOM based on changes in the virtual DOM. By having a single root element, React can easily perform the comparison between the previous an dcurrent states of the virtual DOM.

# In summary, the single-root rule ensures a clear and efficient rendering process, simplifies styling and layout and maintains consistency in react components.

## Object Destructuring
OD is a featue in JS that allows you to extract values form objects and assign them to variables in a more concise and convenient way. This can male your code clearer and more readable.

# Basic Object Destructuring:
- Default Values:
You can also provide default values in case the property is not present in the objects

- Variable Assignemnt:
You can use a different variable names during destructuring:

- Nested Object Destructuring:
Destructuring also works with nested objects.

# When Does a Rerender Happen ?
1.CHnages in a state variable utilized within the components.
2. A re-render of a parent component, which subsequently riggers the re-rendering of all its child components. This cascading effect ensures sysnchronization throughtout the component tree.

## There are 2 ways of minimizing the amount of re-renderes.
1. Push the State down
2. By Using Memoization.

# Push the State Down
in react referes to the pratice of managing state at the lowest possible level in the components tree. By oding so, you localize the state to the components that absolutely need it, reducing unnecessary re-render in higher-level components.

# By Using Memoization
"memo" lets you skip re-rendering a compoenet when its props are unchanged.
The above problem of reducing the number of rendering can also be tackled using Memoization. Memoization in React, achieved through the useMemo hook, is a technique used to optimize performance by memoizing(caching) the results of expensice calculations. This is particular useful when dealing with computations that dont need to be recalculated on every render. preventing unnecessary recalculatioons and re-renders.


## Significance of Key in React
in React, when rendering a list of elements using the map function it is crucial to assogn a unique key prop to each elements. The "key" is a special attribute that helps React identify which item have changed, been added or been removed, This is essential for efficient updates and preventing unnecessary re-renders of the entire list.

-- When the "key" prop is not provided or not unique within the list, React can't efficiently track the changes, leading to potential issues in the application's performance and rendering.

## React Hooks
React Hooks are functions that allow functional components in react to have state and lifecycle features that were previously avaiable only in class components. 

-- Using these Hooks, developers can manage state, handle side effects, optimize performance and create more reusable and readable functional components in React applications. Each hook servers a specific purpose, contributing to a more modular and maintainable codebase.

## useEffect()

useEffect is a React Hook used for performing side effects in functional components. It is often used for task such as data fetching, subscriptions, or manually changing the DOM. The useEffect hook accepts two arguments a function that contains the code to excute, and an optional array of dependecies that determines when the effect should run.

## Hooks - useCallback
useCallback is used to memorize a callback function. This is useful when you have a function that you pass down to child components and you dont want to re-create the function on every rendor, which could lead to unnecessary re-renders of the child components.
One reason to use "useCallback" is to prevent a component from re-rendering unless its props have changed.

## useMemo
useMemo is used to memorize value. This is useful when you have a computataionally expensive calculation tha you dont want to re-run on every render unless specific dependencies change.

## useRef
The useRef Hook allow you to persist values between renders.
It can be used to store a mutable value that does not cause a re-render when updated.
It can be used to access a DOM element directly.

-- Does not Cuase re-renders
If we tired to count how many times our application renders using the "useState" Hook, we would be caught in an infinite loop since this Hook itself causes a re-render.
To avoid this, we can use he "useRef" Hook.

useRef() only returns one item. It returns an Object called Current.

-- Accessing DOM elements
in general, we want React to let handle all DOM manipulation.
But there are some instances where useRef can be used without causing issues.
In react, we can add a "ref" attribute to an element to access it directly in the DOM.

-- Tracking State Changes
The useRef Hook can also be used to keep track of previous state values.
This is because we are able to persist useRef values between renders.

----------------------------------------
## Week 6.2 
----------------------------------------
## Side Effects in React
in the context of React, "side effects" refer to operations or behaviour that occur outside the scope of the typical component rendering process. There can include data fetching, subscriptions, manual DOM manipulations and other actions that have an impact beyond rendering the user interface.

Thus, "side effect" are the operations outside the usual rendering process, and "hooks" like useEffect, are mechanism provided by React to handle these side effects in functional components. The useEffect hook allows you to incorporate side effects into your components in a clean and organized manner.

-- useState()
it is react hook that enables functional components to manage state. It returns an array with 2 elements the current state value and a function to update that value.

## Difference between useEffect, useMemo and useCallback

1. useEffect:
- Purpose : Manages side effects in function components.
- Triggers: Runs after rendering and on subsequent re-renders.
- Use Cases: fetching data, subscriptions, manually changing the DOM, etc.

2. useMemo:
- Purpose: memoizes the result of a computation to avoid unncessary recalculations.
- Triggers: runs during rendering
- use cases: memoizing expensive calculatioons, preventing unnecessary re-render.

3. useCallback:
- purpose: memoizes a callback function to prevent unnecessary re-renders of child components.
- triggers: runs during rendering
- use cases: preventing unnecessary re-renders when passing callbacks to child components.

----------------------------------
## Week 6.3
----------------------------------
## React Reconciliation
It is the process through which react updates the Browser DOM. it makes the DOM updates faster in React. It updates the virtual DOM first and then uses the diffing algo to make efficient and optimized updates in the REAL DOM.

The term "rendering" in react can closely be identified as making or becoming.
in traditional rendering, the broswer does the following task:
1.create a DOM represented by a tree structure.
2. renders any new data to the DOM even if data is similar to previous ones.